miimport org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class OperatorTest {

    private final ValueFormatter formatter = new ValueFormatter() {
        @Override
        public String formatValue(String col, Object value) {
            if (value instanceof String) {
                return "'" + value + "'";
            } else if (value instanceof Number) {
                return value.toString();
            }
            // Extend this as needed for other types
            return value.toString();
        }
    };

    @Test
    public void testEQ() {
        String sql = Operator.EQ.toSql("age", formatter, 30);
        assertEquals("age = 30", sql);

        sql = Operator.EQ.toSql("name", formatter, "John");
        assertEquals("name = 'John'", sql);
    }

    @Test
    public void testNEQ() {
        String sql = Operator.NEQ.toSql("age", formatter, 30);
        assertEquals("age != 30", sql);

        sql = Operator.NEQ.toSql("name", formatter, "John");
        assertEquals("name != 'John'", sql);
    }

    @Test
    public void testLT() {
        String sql = Operator.LT.toSql("age", formatter, 30);
        assertEquals("age < 30", sql);
    }

    @Test
    public void testLTE() {
        String sql = Operator.LTE.toSql("age", formatter, 30);
        assertEquals("age <= 30", sql);
    }

    @Test
    public void testGT() {
        String sql = Operator.GT.toSql("age", formatter, 30);
        assertEquals("age > 30", sql);
    }

    @Test
    public void testGTE() {
        String sql = Operator.GTE.toSql("age", formatter, 30);
        assertEquals("age >= 30", sql);
    }

    @Test
    public void testBETWEEN() {
        String sql = Operator.BETWEEN.toSql("age", formatter, 20, 30);
        assertEquals("age BETWEEN 20 AND 30", sql);
    }

    @Test
    public void testNOT_BETWEEN() {
        String sql = Operator.NOT_BETWEEN.toSql("age", formatter, 20, 30);
        assertEquals("age NOT BETWEEN 20 AND 30", sql);
    }

    @Test
    public void testIN() {
        String sql = Operator.IN.toSql("age", formatter, 20, 30, 40);
        assertEquals("age IN (20, 30, 40)", sql);

        sql = Operator.IN.toSql("name", formatter, "John", "Doe");
        assertEquals("name IN ('John', 'Doe')", sql);
    }

    @Test
    public void testNOT_IN() {
        String sql = Operator.NOT_IN.toSql("age", formatter, 20, 30, 40);
        assertEquals("age NOT IN (20, 30, 40)", sql);

        sql = Operator.NOT_IN.toSql("name", formatter, "John", "Doe");
        assertEquals("name NOT IN ('John', 'Doe')", sql);
    }

    @Test
    public void testLIKE() {
        String sql = Operator.LIKE.toSql("name", formatter, "John%");
        assertEquals("name LIKE 'John%'", sql);
    }

    @Test
    public void testNOT_LIKE() {
        String sql = Operator.NOT_LIKE.toSql("name", formatter, "John%");
        assertEquals("name NOT LIKE 'John%'", sql);
    }

    @Test
    public void testILIKE() {
        String sql = Operator.ILIKE.toSql("name", formatter, "john%");
        assertEquals("name ILIKE 'john%'", sql);
    }

    @Test
    public void testNOT_ILIKE() {
        String sql = Operator.NOT_ILIKE.toSql("name", formatter, "john%");
        assertEquals("name NOT ILIKE 'john%'", sql);
    }

    @Test
    public void testIS_NULL() {
        String sql = Operator.IS_NULL.toSql("name", formatter);
        assertEquals("name IS NULL", sql);
    }

    @Test
    public void testIS_NOT_NULL() {
        String sql = Operator.IS_NOT_NULL.toSql("name", formatter);
        assertEquals("name IS NOT NULL", sql);
    }

    @Test
    public void testFromString() {
        assertEquals(Operator.EQ, Operator.fromString("="));
        assertEquals(Operator.NEQ, Operator.fromString("!="));
        assertEquals(Operator.LT, Operator.fromString("<"));
        assertEquals(Operator.GT, Operator.fromString(">"));
        assertEquals(Operator.LIKE, Operator.fromString("LIKE"));
        // Add other cases as needed
    }
}



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class FilterConverterTest {

    private final ValueFormatter formatter = new ValueFormatter() {
        @Override
        public String formatValue(String col, Object value) {
            if (value instanceof String) {
                return "'" + value + "'";
            } else if (value instanceof Number) {
                return value.toString();
            }
            // Extend this as needed for other types
            return value.toString();
        }
    };

    @Test
    public void testSimpleFilter() {
        RuleGroupType ruleGroup = new RuleGroupType();
        ruleGroup.setField("age");
        ruleGroup.setOperator("eq");
        ruleGroup.setValue(30);

        Filter filter = FilterConverter.convertToFilter(ruleGroup, formatter);
        assertTrue(filter instanceof StringFilter);
        assertEquals("age = 30", ((StringFilter) filter).getFilter());
    }

    @Test
    public void testSimpleFilterStringValue() {
        RuleGroupType ruleGroup = new RuleGroupType();
        ruleGroup.setField("name");
        ruleGroup.setOperator("eq");
        ruleGroup.setValue("John");

        Filter filter = FilterConverter.convertToFilter(ruleGroup, formatter);
        assertTrue(filter instanceof StringFilter);
        assertEquals("name = 'John'", ((StringFilter) filter).getFilter());
    }

    @Test
    public void testCompositeFilter() {
        RuleGroupType ruleGroup1 = new RuleGroupType();
        ruleGroup1.setField("age");
        ruleGroup1.setOperator("gt");
        ruleGroup1.setValue(30);

        RuleGroupType ruleGroup2 = new RuleGroupType();
        ruleGroup2.setField("name");
        ruleGroup2.setOperator("eq");
        ruleGroup2.setValue("John");

        RuleGroupType compositeRuleGroup = new RuleGroupType();
        compositeRuleGroup.setOperator("AND");
        compositeRuleGroup.setRules(Arrays.asList(ruleGroup1, ruleGroup2));

        Filter filter = FilterConverter.convertToFilter(compositeRuleGroup, formatter);
        assertTrue(filter instanceof CompositeFilter);
        CompositeFilter compositeFilter = (CompositeFilter) filter;
        assertEquals("AND", compositeFilter.getOperator());

        List<Filter> filters = compositeFilter.getFilters();
        assertEquals(2, filters.size());

        Filter firstFilter = filters.get(0);
        assertTrue(firstFilter instanceof StringFilter);
        assertEquals("age > 30", ((StringFilter) firstFilter).getFilter());

        Filter secondFilter = filters.get(1);
        assertTrue(secondFilter instanceof StringFilter);
        assertEquals("name = 'John'", ((StringFilter) secondFilter).getFilter());
    }

    @Test
    public void testEmptyCompositeFilter() {
        RuleGroupType compositeRuleGroup = new RuleGroupType();
        compositeRuleGroup.setOperator("AND");
        compositeRuleGroup.setRules(Collections.emptyList());

        Filter filter = FilterConverter.convertToFilter(compositeRuleGroup, formatter);
        assertTrue(filter instanceof CompositeFilter);
        CompositeFilter compositeFilter = (CompositeFilter) filter;
        assertEquals("AND", compositeFilter.getOperator());
        assertTrue(compositeFilter.getFilters().isEmpty());
    }
}



import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class DataTypeTest {

    @Test
    public void testGetSqlType() {
        assertEquals("character varying", DataType.TEXT.getSqlType());
        assertEquals("text", DataType.LONG_TEXT.getSqlType());
        assertEquals("numeric", DataType.DECIMAL.getSqlType());
        assertEquals("integer", DataType.INTEGER.getSqlType());
        assertEquals("boolean", DataType.BOOLEAN.getSqlType());
        assertEquals("timestamp without time zone", DataType.TIMESTAMP.getSqlType());
        assertEquals("date", DataType.DATE.getSqlType());
    }

    @Test
    public void testFromSqlType() {
        assertEquals(DataType.TEXT, DataType.fromSqlType("character varying"));
        assertEquals(DataType.LONG_TEXT, DataType.fromSqlType("text"));
        assertEquals(DataType.DECIMAL, DataType.fromSqlType("numeric"));
        assertEquals(DataType.INTEGER, DataType.fromSqlType("integer"));
        assertEquals(DataType.BOOLEAN, DataType.fromSqlType("boolean"));
        assertEquals(DataType.TIMESTAMP, DataType.fromSqlType("timestamp without time zone"));
        assertEquals(DataType.DATE, DataType.fromSqlType("date"));
        assertNull(DataType.fromSqlType("unknown type"));
    }

    @Test
    public void testToInputType() {
        assertEquals(InputType.TEXT, DataType.TEXT.toInputType());
        assertEquals(InputType.TEXT, DataType.LONG_TEXT.toInputType());
        assertEquals(InputType.NUMBER, DataType.DECIMAL.toInputType());
        assertEquals(InputType.NUMBER, DataType.INTEGER.toInputType());
        assertEquals(InputType.DATE, DataType.TIMESTAMP.toInputType());
        assertEquals(InputType.DATE, DataType.DATE.toInputType());
        assertEquals(InputType.TEXT, DataType.BOOLEAN.toInputType());
    }

    @Test
    public void testToFieldOperators() {
        assertEquals(FieldOperators.TEXT, DataType.TEXT.toFieldOperators());
        assertEquals(FieldOperators.TEXT, DataType.LONG_TEXT.toFieldOperators());
        assertEquals(FieldOperators.NUMBER, DataType.DECIMAL.toFieldOperators());
        assertEquals(FieldOperators.NUMBER, DataType.INTEGER.toFieldOperators());
        assertEquals(FieldOperators.DATE, DataType.TIMESTAMP.toFieldOperators());
        assertEquals(FieldOperators.DATE, DataType.DATE.toFieldOperators());
        assertEquals(FieldOperators.BOOL, DataType.BOOLEAN.toFieldOperators());
    }
}



import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.function.Supplier;

public final class SSSourceNew {
    private static final String DATA_SOURCE = "dynamic_data_source";

    public interface Spec {
        // This will be dynamically created
        TableSpec TABLE_SPEC = null;

        // Indices will be set dynamically as well
        int[] COLUMN_INDICES = null;
    }

    public static TableSpec buildTableSpec(ResultSetMetaData metaData) throws SQLException {
        TableSpec.Builder builder = TableSpec.builder()
                .name(DATA_SOURCE)
                .description("Dynamically created table spec");

        int columnCount = metaData.getColumnCount();
        int[] columnIndices = new int[columnCount];

        for (int i = 1; i <= columnCount; i++) {
            String columnName = metaData.getColumnName(i);
            String columnTypeName = metaData.getColumnTypeName(i);
            Class<?> columnClass = getClassForType(columnTypeName);
            builder.field(columnClass)
                    .name(columnName)
                    .description("Dynamic column: " + columnName)
                    .build();
            columnIndices[i - 1] = builder.indexFor(columnName);
        }

        Spec.TABLE_SPEC = builder.build();
        Spec.COLUMN_INDICES = columnIndices;
        return Spec.TABLE_SPEC;
    }

    private static Class<?> getClassForType(String typeName) {
        return switch (typeName.toLowerCase()) {
            case "varchar", "char", "text" -> String.class;
            case "int", "integer", "smallint", "bigint" -> Integer.class;
            case "decimal", "numeric", "real", "float", "double" -> Double.class;
            case "boolean" -> Boolean.class;
            case "date", "timestamp" -> java.sql.Date.class;
            default -> Object.class;
        };
    }

    public static final Supplier<Table> getTableSupplier(ResultSet rs) {
        return () -> {
            try {
                TableSpec tableSpec = buildTableSpec(rs.getMetaData());
                Table table = ConcurrentTable.FACTORY.create(tableSpec);
                load(table, rs);
                return table;
            } catch (SQLException e) {
                throw new RuntimeException("Error creating table from ResultSet metadata", e);
            }
        };
    }

    private static void load(final Table table, final ResultSet rs) throws SQLException {
        while (rs.next()) {
            final TableRow row = table.createRow();
            for (int i = 0; i < Spec.COLUMN_INDICES.length; i++) {
                row.set(Spec.COLUMN_INDICES[i], rs.getObject(i + 1));
            }
            table.add(row);
        }
    }

    public class JdbcResultSet implements ResultSet {
        private final Logger logger;
        private final java.sql.ResultSet rs;
        private final Int2IntHashMap fieldIndexVsSqlTypeMappings;
        private final Object2IntHashMap<String> fieldNamesVsIndexMappings;
        private final FieldModel fieldModel;
        private final int total;
        private final Range range;
        private final AtomicInteger index;
        private SerializableRow mutable;

        // Constructor and methods for JdbcResultSet
    }
}




import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Supplier;

public final class SSSourceNew {

    private static final String DATA_SOURCE = "dynamic_data_source";

    public static class Spec {
        private TableSpec tableSpec;
        private int[] columnIndices;

        public TableSpec getTableSpec() {
            return tableSpec;
        }

        public int[] getColumnIndices() {
            return columnIndices;
        }

        public void setTableSpec(TableSpec tableSpec) {
            this.tableSpec = tableSpec;
        }

        public void setColumnIndices(int[] columnIndices) {
            this.columnIndices = columnIndices;
        }
    }

    public static Spec buildTableSpec(ResultSetMetaData metaData) throws SQLException {
        TableSpec.Builder builder = TableSpec.builder()
                .name(DATA_SOURCE)
                .description("Dynamically created table spec");

        int columnCount = metaData.getColumnCount();
        int[] columnIndices = new int[columnCount];

        for (int i = 1; i <= columnCount; i++) {
            String columnName = metaData.getColumnName(i);
            String columnTypeName = metaData.getColumnTypeName(i);
            Class<?> columnClass = getClassForType(columnTypeName);
            builder.field(columnClass)
                    .name(columnName)
                    .description("Dynamic column: " + columnName)
                    .build();
            columnIndices[i - 1] = builder.indexFor(columnName);
        }

        Spec spec = new Spec();
        spec.setTableSpec(builder.build());
        spec.setColumnIndices(columnIndices);

        return spec;
    }

    private static Class<?> getClassForType(String typeName) {
        return switch (typeName.toLowerCase()) {
            case "varchar", "char", "text" -> String.class;
            case "int", "integer", "smallint", "bigint" -> Integer.class;
            case "decimal", "numeric", "real", "float", "double" -> Double.class;
            case "boolean" -> Boolean.class;
            case "date", "timestamp" -> java.sql.Date.class;
            default -> Object.class;
        };
    }

    public static final Supplier<Table> getTableSupplier(ResultSet rs) {
        return () -> {
            try {
                Spec spec = buildTableSpec(rs.getMetaData());
                Table table = ConcurrentTable.FACTORY.create(spec.getTableSpec());
                load(table, rs, spec);
                return table;
            } catch (SQLException e) {
                throw new RuntimeException("Error creating table from ResultSet metadata", e);
            }
        };
    }

    private static void load(final Table table, final ResultSet rs, final Spec spec) throws SQLException {
        while (rs.next()) {
            final TableRow row = table.createRow();
            for (int i = 0; i < spec.getColumnIndices().length; i++) {
                row.set(spec.getColumnIndices()[i], rs.getObject(i + 1));
            }
            table.add(row);
        }
    }

    public class JdbcResultSet implements ResultSet {
        private final Logger logger;
        private final java.sql.ResultSet rs;
        private final Int2IntHashMap fieldIndexVsSqlTypeMappings;
        private final Object2IntHashMap<String> fieldNamesVsIndexMappings;
        private final FieldModel fieldModel;
        private final int total;
        private final Range range;
        private final AtomicInteger index;
        private SerializableRow mutable;

        // Constructor and methods for JdbcResultSet
    }
}


